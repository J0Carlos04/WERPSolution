using System;
using System.Collections.Generic;
using System.Linq;
using System.Web.UI.WebControls;
using U = Utility;
using F = FineUI;
using System.Collections;


public partial class Pages_Inventory_StockOutInput : PageBase
{
    #region Fields
    private const string vsUserName = "Username";
    private const string vsWorkOrderId = "WorkOrderId";
    #endregion

    #region Handlers
    protected void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack) Initialize();
    }
    protected void Fbtn_Click(object sender, EventArgs e)
    {
        F.Button btn = (F.Button)sender;
        switch (btn.ID)
        {            
            case "btnSubmit":
                Submit();
                break;
            case "btnDelete":
                Delete();
                break;
        }
    }
    protected void ddl_SelectedIndexChanged(object sender, EventArgs e)
    {
        DropDownList ddl = (DropDownList)sender;
        switch (ddl.ID)
        {
            case "ddlStockOutType":
                StockOutTypeChanged();
                break;
        }
    }
    protected void gvItems_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            Literal ltrl_No = (Literal)e.Row.FindControl("ltrl_No");
            ltrl_No.Text = (e.Row.RowIndex + 1).ToText();
        }
    }
    protected void gvItems_DataBound(object sender, EventArgs e)
    {
        if (ddlStockOutType.SelectedValue.Is("Helpdesk")) gvItems.Columns[1].Visible = true;
        else gvItems.Columns[1].Visible = false;
    }
    protected void wo_Close(object sender, FineUI.WindowCloseEventArgs e)
    {
        if (ddlStockOutType.SelectedValue.Is("Workorder"))
        {
            SetInitControl(e.CloseArgument);
            Session[CNT.Session.Wrapping] = null;
        }
        else
        {
            hfHelpdeskId.Text = e.CloseArgument;
            Helpdesk h = Helpdesk.GetById(hfHelpdeskId.Text);
            tbWorkOrderCode.Value = h.Code;
            tbWorkOrderCodeLookup.Value = h.Code;
            tbWODescription.Value = h.RequestDetail;

            List<object> woiList = WorkOrderItem.StockoutLookupGetByHelpdeskId(h.Id);
            List<object> soiList = new List<object>();
            Wrapping w = new Wrapping();
            foreach (WorkOrderItem woi in woiList)
            {
                Stock s = Stock.GetByItemId(woi.ItemId);
                if (s.Qty < woi.Qty)
                    w.ErrorValidation = $"Request Failed, Available Qty is only {s.Qty} while demand is {woi.Qty} for Item ({woi.ItemCode}){woi.ItemName}";
                if ($"{w.Sb}" != "") continue;

                string ErrorMessage = SetStockOutItem(woi, ref soiList);
                if (ErrorMessage.IsNotEmpty())
                {
                    w.ErrorValidation = ErrorMessage;
                    break;
                }
            }
            if ($"{w.Sb}" != "")
            {
                U.ShowMessage($"{w.Sb}");
                return;
            }
            U.BindGrid(gvItems, soiList);
        }
    }
    #endregion

    #region Methods
    private void Initialize()
    {
        ViewState[vsUserName] = U.GetUsername();
        if ($"{ViewState[vsUserName]}" == "") Response.Redirect(@"~\Pages\default.aspx");
        btnCancel.OnClientClick = "parent.removeActiveTab();";

        tbCode.Value = "Auto Generated by System";
        U.SetDropDownMasterData(ddlTakesOutUserId, "Users");
        if (U.WorkOrderId.IsNull())
        {
            U.Hide(CNT.DV.StockOut.Code);
            U.Display(CNT.DV.StockOut.CodeLookup);
            btnSelectWorkOrder.OnClientClick = wo.GetShowReference($"~/Pages/Inventory/SelectWO.aspx");
            btnSelectWorkOrder.OnClientClick += "return false;";
            U.BindGrid(gvItems, new List<object> { new StockOutItem { } });
        }
        else
        {
            U.Display(CNT.DV.StockOut.Code);
            U.Hide(CNT.DV.StockOut.CodeLookup);
            SetInitControl(U.WorkOrderId);
        }        
        InitEdit();
    }
    private void SetInitControl(object WorkOrderId)
    {        
        ViewState[vsWorkOrderId] = WorkOrderId;
        hfWorkOrderId.Text = $"{WorkOrderId}";
        WorkOrder o = WorkOrder.GetById(WorkOrderId);
        tbWorkOrderCode.Value = o.Code;
        tbWorkOrderCodeLookup.Value = o.Code;
        tbWODescription.Value = o.WorkDescription;        

        List<object> woiList = WorkOrderItem.GetByWorkOrderId(o.Id);
        List<object> soiList = new List<object>();        
        Wrapping w = new Wrapping();
        foreach (WorkOrderItem woi in woiList)
        {
            Stock s = Stock.GetByItemId(woi.ItemId);
            if (s.Qty < woi.Qty)
                w.ErrorValidation = $"Request Failed, Available Qty is only {s.Qty} while demand is {woi.Qty} for Item ({woi.ItemCode}){woi.ItemName}";
            if ($"{w.Sb}" != "") continue;

            SetStockOutItem(woi, ref soiList);
        }
        if ($"{w.Sb}" != "")
        {
            U.ShowMessage($"{w.Sb}");
            return;
        }
        U.BindGrid(gvItems, soiList);
    }
    private string SetStockOutItem(WorkOrderItem woi, ref List<object> soiList)
    {
        string Result = "";
        StockOutItem soi = new StockOutItem();
        List<object> sriList = StockReceivedItem.GetAvailableByItemId(woi.ItemId);        
        Goods g = Goods.GetById(woi.ItemId);
        if (sriList.Count.IsZero()) return $"Stock for item with code {g.Code} and Name {g.Name} is not available";        

        #region Use SKU
        if (g.UseSKU)
        {
            var MonthStock = sriList.GroupBy(a => new { ((StockReceivedItem)a).ReceivedDate.Month }).ToList();
            foreach (var Items in MonthStock)
            {
                if (woi.Qty.IsZero()) break;
                foreach (StockReceivedItem sri in Items)
                {
                    if (woi.Qty.IsZero()) break;
                    if (Items.Count() <= woi.Qty)
                        soi = new StockOutItem { StockReceivedItemId = sri.Id, ItemId = sri.ItemId, ItemCode = woi.ItemCode, ItemName = woi.ItemName, Qty = 1, UnusedQty = 1, WarehouseId = sri.WarehouseId, Warehouse = sri.Warehouse, RackId = sri.RackId, Rack = sri.Rack, SKU = sri.SKU, UseSKU = true };
                    else
                        soi = new StockOutItem { StockReceivedItemId = 0, ItemId = sri.ItemId, ItemCode = woi.ItemCode, ItemName = woi.ItemName, Qty = 1, UnusedQty = 1, WarehouseId = sri.WarehouseId, Warehouse = sri.Warehouse, RackId = sri.RackId, Rack = sri.Rack, SKU = "", UseSKU = true };
                    soiList.Add(soi);                    
                    woi.Qty -= 1;
                }                
            }            
        }
        #endregion

        #region Not Use SKU
        else
        {            
            if (ddlStockOutType.SelectedValue.Is("Helpdesk"))
            {
                List<object> woList = WorkOrder.GetByHelpdesk(hfHelpdeskId.Text);                
                foreach (WorkOrder wo in woList)
                {
                    int Qty = woi.Qty / woList.Count;
                    soiList = AllocateStockOut(Qty, sriList, woi, soiList, wo.Id);                    
                }                
            }
            else
            {
                soiList = AllocateStockOut(woi.Qty, sriList, woi, soiList, 0);
            }
            
        }
        #endregion        

        return Result;
    }
    private List<object> AllocateStockOut(int Qty, List<object> sriList, WorkOrderItem woi, List<object> soiList, int WorkOrderId = 0)
    {        
        int idx = 0;
        while (Qty != 0)
        {            
            if (idx.Is(sriList.Count)) break;
            StockReceivedItem sri = (StockReceivedItem)sriList[idx];
            if (sri.AvailableQty.IsZero())
            {
                idx += 1;
                continue;
            }
                
            StockOutItem soi = new StockOutItem { StockReceivedItemId = sri.Id, ItemId = sri.ItemId, ItemCode = woi.ItemCode, ItemName = woi.ItemName, WarehouseId = sri.WarehouseId, Warehouse = sri.Warehouse, RackId = sri.RackId, Rack = sri.Rack };
            if (sri.AvailableQty < Qty)
            {
                Qty -= sri.AvailableQty;
                soi.Qty = sri.AvailableQty;
                soi.UnusedQty = soi.Qty;
                sri.AvailableQty = 0;
            }
            else
            {
                sri.AvailableQty -= Qty;
                soi.Qty = Qty;
                soi.UnusedQty = soi.Qty;
                Qty = 0;
            }
            soiList.Add(soi);
        }
        return soiList;
    }
    private void InitEdit()
    {
        btnDelete.Hidden = true;
        if (U.Id.IsNull()) return;
        U.Display(CNT.DV.StockOut.Code);
        U.Hide(CNT.DV.StockOut.CodeLookup);
        StockOut so = StockOut.GetById(U.Id);
        if (so.HelpdeskId.IsZero())
        {
            WorkOrder wo = WorkOrder.GetById(so.WorkOrderId);
            lblCodeTitle.Text = "Work Order Code";
            hfWorkOrderId.Text = wo.Id.ToText();
            tbWorkOrderCode.Value = wo.Code;
            ddlStockOutType.SelectedValue = "Workorder";
            lblDescriptionTitle.Text = "Work Order Description";
            tbWODescription.Value = wo.WorkDescription;
        }
        else
        {
            Helpdesk h = Helpdesk.GetById(so.HelpdeskId);
            lblCodeTitle.Text = "Helpdesk Code";
            hfHelpdeskId.Text = h.Id.ToText();
            tbWorkOrderCode.Value = h.Code;
            ddlStockOutType.SelectedValue = "Helpdesk";
            lblDescriptionTitle.Text = "Request Detail";
            tbWODescription.Value = h.RequestDetail;
        }
            
        tbCode.Value = so.Code;
        tbDescription.Value = so.Description;
        tbOutDate.Value = so.OutDate.ToString("yyyy-MM-dd HH:mm");
        ddlTakesOutUserId.SelectedValue = $"{so.TakesOutUserId}";
       
        List<object> soiList = StockOutItem.GetByStockOutId(so.Id);
        List<object> woiList = WorkOrderItem.GetByWorkOrderId(so.WorkOrderId);
        Wrapping w = new Wrapping();
        foreach (WorkOrderItem woi in woiList)
        {
            if (!soiList.Exists(a => ((StockOutItem)a).ItemId == woi.ItemId))
            {
                Stock s = Stock.GetByItemId(woi.ItemId);
                if (s.Qty < woi.Qty)
                    w.ErrorValidation = $"Request Failed, Available Qty is only {s.Qty} while demand is {woi.Qty} for Item ({woi.ItemCode}){woi.ItemName}";
                if ($"{w.Sb}" != "") continue;
                SetStockOutItem(woi, ref soiList);
            }
        }
        if ($"{w.Sb}" != "")
        {
            U.ShowMessage($"{w.Sb}");
            return;
        }
        U.BindGrid(gvItems, soiList);
        if (!soiList.Exists(a => ((StockOutItem)a).UsedQty > 0 || ((StockOutItem)a).ReturQty > 0 ))
            btnDelete.Hidden = false;

    }
    private void StockOutTypeChanged()
    {
        if (ddlStockOutType.SelectedValue.Is("Workorder"))
        {
            btnSelectWorkOrder.OnClientClick = wo.GetShowReference($"~/Pages/Inventory/SelectWO.aspx", "Select Work Order");
            btnSelectWorkOrder.OnClientClick += "return false;";
        }
        else
        {
            btnSelectWorkOrder.OnClientClick = wo.GetShowReference($"~/Pages/Inventory/SelectHelpdesk.aspx", "Select Helpdesk");
            btnSelectWorkOrder.OnClientClick += "return false;";
        }
        tbWorkOrderCodeLookup.Value = "";
        U.BindGrid(gvItems, new List<object> { new StockOutItem { } });
    }

    private void Submit()
    {
        Wrapping w = new Wrapping();
        Validation(w);
        if ($"{w.Sb}" != "") U.ShowMessage($"{w.Sb}");
        else
        {
            string Result = Save(w);
            if ($"{Result}".Contains("Error Message"))
            {
                U.ShowMessage(Result);
                return;
            }
            F.Alert.Show("Data has been Save Successfully", String.Empty, F.Alert.DefaultMessageBoxIcon, "parent.activeTabAndUpdate('" + Request.QueryString["parenttabid"] + "', '" + "Search" + "');");

        }
    }
    private void Validation(Wrapping w)
    {        
        if (tbOutDate.Value.IsEmpty()) w.RequiredValidation = "Out Date";
        if (ddlTakesOutUserId.SelectedValue.IsEmpty()) w.RequiredValidation = "Takes Out";
        if (ddlStockOutType.SelectedValue.Is("Workorder"))
        {
            if (hfWorkOrderId.Text.IsEmpty()) w.RequiredValidation = "Work Order";
        }
        else if (hfHelpdeskId.Text.IsEmpty()) w.RequiredValidation = "Helpdesk";
        w.ListData = U.GetGridData(gvItems, typeof(StockOutItem)).ListData.FindAll(a => !((StockOutItem)a).ItemCode.IsEmpty());
        if (w.ListData.Count == 0) w.RequiredValidation = "Item";
        int idx = 0;

        foreach (StockOutItem soi in w.ListData)
        {
            idx += 1;
            if (soi.UseSKU)
            {
                if (soi.SKU.IsEmpty()) w.ErrorValidation = $"SKU is requied at row {idx}";
                else
                {                    
                    if (w.ListData.Exists(a => ((StockOutItem)a).No < idx && ((StockOutItem)a).SKU.Is(soi.SKU))) w.ErrorValidation = $"SKU : {soi.SKU}, is already used at row {idx}";
                    if (soi.Id.IsZero() && !StockReceivedItem.IsSKUExist(soi.ItemId, soi.SKU)) w.ErrorValidation = $"SKU : {soi.SKU}, is not exist at row {idx}";
                    else if (!StockReceivedItem.IsSKUInWarehouseExist(soi.ItemId, soi.WarehouseId, soi.RackId, soi.SKU)) w.ErrorValidation = $"SKU not found in Warehouse : {soi.Warehouse} and Rack : {soi.Rack} at row {idx}";
                }
            }                
        }
    }
    private string Save(Wrapping w)
    {
        string Result = "";

        #region Stock Out        
        StockOut so = new StockOut();
        if (ddlStockOutType.SelectedValue.Is("Workorder"))
            so.WorkOrderId = U.WorkOrderId.IsNull() ? hfWorkOrderId.Text.ToInt() : U.WorkOrderId.ToInt();
        else so.HelpdeskId = hfHelpdeskId.Text.ToInt();
        so.Code = tbCode.Value;
        so.Description = tbDescription.Value;
        so.OutDate = tbOutDate.Value.ToHTML5DateTime();
        so.TakesOutUserId = ddlTakesOutUserId.SelectedValue.ToInt();        
        if (U.Id.IsNull())
        {
            so.Code = $"WO{DateTime.Now.Year}{DateTime.Now.Month.ToString("00")}{DateTime.Now.Day.ToString("00")}-";
            so.CreatedBy = $"{ViewState[vsUserName]}";
            Result = so.Insert();
            if (Result.ContainErrorMessage()) return Result;
            so.Id = Result.ToInt();
        }
        else
        {
            so.ModifiedBy = $"{ViewState[vsUserName]}";
            so.Id = U.Id.ToInt();
            Result = so.Update();
            if (Result.ContainErrorMessage()) return Result;
        }

        if (ddlStockOutType.SelectedValue.Is("Helpdesk"))
        {
            List<object> woList = WorkOrder.GetByHelpdesk(so.HelpdeskId);
            foreach (WorkOrder wo in woList)
            {                
                Result = WorkOrder.UpdateStockOutId(so.Id, wo.Id, wo.Status);
                if (Result.ContainErrorMessage()) return Result;
            }
        }
        else
        {
            WorkOrder wo = WorkOrder.GetById(hfWorkOrderId.Text);
            Result = WorkOrder.UpdateStockOutId(so.Id, so.WorkOrderId, wo.Status);
            if (Result.ContainErrorMessage()) return Result;
        }        
        #endregion

        #region Stock Out Item
        foreach (StockOutItem soi in w.ListData)
        {
            soi.StockOutId = so.Id;
            StockReceivedItem sri = new StockReceivedItem();
            if (soi.StockReceivedItemId.IsZero())
            {
                sri = StockReceivedItem.GetBySKU(soi.ItemId, soi.SKU);
                soi.StockReceivedItemId = sri.Id;
            }               
            else sri = StockReceivedItem.GetById(soi.StockReceivedItemId);

            Stock s = Stock.GetByItemId(soi.ItemId);
            StockMovement sm = new StockMovement();            

            #region Insert
            if (soi.Id == 0)
            {                
                soi.CreatedBy = $"{ViewState[vsUserName]}";
                Result = soi.Insert();
                if (Result.ContainErrorMessage()) return Result;
                soi.Id = Result.ToInt();

                #region Stock Received Item
                sri.AvailableQty -= soi.Qty;
                sri.StockOutQty += soi.Qty;
                Result = sri.UpdateStockOut();
                if (Result.ContainErrorMessage()) return Result;
                #endregion

                #region Stock Movement            
                sm.StockOutItemId = soi.Id;
                sm.ItemId = soi.ItemId;
                sm.RequesterUserId = so.TakesOutUserId;
                sm.Qty = soi.Qty;
                sm.MovementType = "StockOut";
                sm.MovementDate = so.OutDate;
                sm.CreatedBy = $"{ViewState[vsUserName]}";
                Result = sm.Insert();
                if (Result.ContainErrorMessage()) return Result;
                #endregion

                #region Stock                
                s.ItemId = soi.ItemId;                
                s.Qty -= soi.Qty;
                if (s.Id == 0)
                {
                    s.CreatedBy = $"{ViewState[vsUserName]}";
                    Result = s.Insert();
                    if (Result.ContainErrorMessage()) return Result;
                }
                else
                {
                    s.ModifiedBy = $"{ViewState[vsUserName]}";
                    Result = s.Update();
                    if (Result.ContainErrorMessage()) return Result;
                }
                #endregion
            }
            #endregion
            #region Update
            else
            {    
                StockOutItem soiDB = StockOutItem.GetById(soi.Id);
                sri.AvailableQty += soiDB.Qty;
                sri.StockOutQty -= soiDB.Qty;
                s.Qty += soiDB.Qty;

                Result = soi.Update();
                if (Result.ContainErrorMessage()) return Result;

                #region Stock Received Item
                sri.AvailableQty -= soi.Qty;
                sri.StockOutQty += soi.Qty;
                Result = sri.UpdateStockOut();
                if (Result.ContainErrorMessage()) return Result;
                #endregion

                #region Stock Movement
                sm = StockMovement.GetByStockOutItemId(soi.Id);                
                sm.Qty = soi.Qty;
                sm.MovementDate = so.OutDate;
                sm.ModifiedBy = $"{ViewState[vsUserName]}";
                Result = sm.Update();
                if (Result.ContainErrorMessage()) return Result;
                #endregion                

                #region Stock                
                s.ItemId = soi.ItemId;
                s.Qty -= soi.Qty;
                if (s.Id == 0)
                {
                    s.CreatedBy = $"{ViewState[vsUserName]}";
                    Result = s.Insert();
                    if (Result.ContainErrorMessage()) return Result;
                }
                else
                {
                    s.ModifiedBy = $"{ViewState[vsUserName]}";
                    Result = s.Update();
                    if (Result.ContainErrorMessage()) return Result;
                }
                #endregion
            }
            #endregion                        
        }
        #endregion

        return Result;
    }    
    private void Delete()
    {
        StockOut so = StockOut.GetById(U.Id);
        List<object> oList = StockOutItem.GetByStockOutId(so.Id);

        string Result = "";
        if (so.HelpdeskId.IsZero())
        {
            Result = WorkOrder.UpdateStockOutId(0, so.WorkOrderId, CNT.Status.StockOut, 0);
            if (Result.ContainErrorMessage())
            {
                U.ShowMessageDelete(Result);
                return;
            }
        }  
        else
        {
            foreach (WorkOrder wo in WorkOrder.GetByHelpdesk(so.HelpdeskId))
            {
                Result = WorkOrder.UpdateStockOutId(0, wo.Id, CNT.Status.StockOut, 0);
                if (Result.ContainErrorMessage())
                {
                    U.ShowMessageDelete(Result);
                    return;
                }
            }
        }

        foreach (StockOutItem o in oList)
        {
            #region Update Stock Received Item
            StockReceivedItem sri = StockReceivedItem.GetById(o.StockReceivedItemId);
            sri.AvailableQty += o.Qty;
            sri.StockOutQty -= o.Qty;
            Result = sri.Update();
            if (Result.ContainErrorMessage())
            {
                U.ShowMessageDelete(Result);
                return;
            }
            #endregion

            #region Update Stock
            Stock s = Stock.GetByItemId(o.ItemId);
            s.Qty = (s.Qty + o.Qty);
            s.ModifiedBy = U.GetUsername();
            Result = s.Update();
            if (Result.ContainErrorMessage())
            {
                U.ShowMessageDelete(Result);
                return;
            }
            #endregion

            #region Delete StockOutItem
            Result = o.Delete();
            if (Result.ContainErrorMessage())
            {
                U.ShowMessageDelete(Result);
                return;
            }
            #endregion

            #region Delete Stock Movement
            StockMovement sm = StockMovement.GetByStockOutItemId(o.Id);
            Result = sm.Delete();
            if (Result.ContainErrorMessage())
            {
                U.ShowMessageDelete(Result);
                return;
            }
            #endregion            
        }
        Result = so.Delete();
        if (Result.ContainErrorMessage())
        {
            U.ShowMessageDelete(Result);
            return;
        }
        F.Alert.Show("Data has been Deleted Successfully", String.Empty, F.Alert.DefaultMessageBoxIcon, "parent.activeTabAndUpdate('" + Request.QueryString["parenttabid"] + "', '" + "Search" + "');");
    }
    #endregion    
}